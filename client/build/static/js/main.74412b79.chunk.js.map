{"version":3,"sources":["themes/theme.js","pages/Ping.js","pages/Landing.js","App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","typography","fontFamily","primary","secondary","error","bgcolor","Ping","props","_useState","useState","_useState2","Object","slicedToArray","result","setResult","_useState3","_useState4","answer","setAnswer","useEffect","incrementStep","react_default","a","createElement","Typography","FormControl","TextField","label","onChange","e","target","value","Button","onClick","status","console","log","fetch","method","headers","Content-Type","body","JSON","stringify","teamName","then","res","json","Error","response","catch","err","message","LandingPage","state","welcomeMessage","step","_this","setState","prevState","_this2","this","_this3","classes","className","landingContainer","Fragment","react_router_dom","to","react_router","path","render","pages_Ping","assign","Component","withStyles","margin","spacing","unit","App","MuiThemeProvider","component","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.74412b79.chunk.js","sourcesContent":["import { createMuiTheme } from \"@material-ui/core\";\r\n\r\nexport const theme = createMuiTheme({\r\n  typography: {\r\n    fontFamily: '\"Roboto\"'\r\n  },\r\n  primary: \"#f04040\",\r\n  secondary: \"#1f1f1f\",\r\n  error: \"#d8000c\",\r\n  bgcolor: \"#f6f6f6\"\r\n});\r\n","import { FormControl, TextField, Button, Typography } from \"@material-ui/core\";\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nfunction Ping(props) {\r\n  const [result, setResult] = useState(\"\");\r\n  const [answer, setAnswer] = useState(\"\");\r\n  useEffect(() => {\r\n    props.incrementStep();\r\n  }, []);\r\n\r\n  const submitAnswer = () => {\r\n    console.log(\"run\");\r\n    let status;\r\n    fetch(\"/ping\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({ teamName: answer })\r\n    })\r\n      .then(res => {\r\n        status = res.status;\r\n        if (status < 500) return res.json();\r\n        else throw Error(\"Server error\");\r\n      })\r\n      .then(res => {\r\n        setResult(res.response);\r\n        if (status === 200) props.incrementStep();\r\n      })\r\n      .catch(err => {\r\n        console.log(err.message);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Typography>\r\n        Step 3: Add your first name to server/.env, restart the server and test\r\n        the result below\r\n      </Typography>\r\n      <Typography>{result}</Typography>\r\n\r\n      <FormControl>\r\n        <TextField\r\n          label={\"first name\"}\r\n          onChange={e => setAnswer(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <Button onClick={submitAnswer}>Submit</Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Ping;\r\n","import React, { Component } from \"react\";\r\n\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { Route, Link } from \"react-router-dom\";\r\n\r\nimport Ping from \"./Ping\";\r\n\r\nconst landinPageStyle = theme => ({\r\n  landingContainer: {\r\n    margin: theme.spacing.unit * 2\r\n  }\r\n});\r\n\r\nclass LandingPage extends Component {\r\n  state = {\r\n    welcomeMessage: \"Step 1: Run the server and refresh (not running)\",\r\n    step: 0\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch(\"/welcome\")\r\n      .then(res => {\r\n        console.log(res);\r\n        if (res.status === 200) return res.json();\r\n        else throw Error(\"Couldn't connect to the server\");\r\n      })\r\n      .then(res => {\r\n        this.setState({ welcomeMessage: res.welcomeMessage });\r\n        this.incrementStep();\r\n      })\r\n      .catch(err => {\r\n        console.log(err.message);\r\n      });\r\n  }\r\n\r\n  incrementStep = () => {\r\n    this.setState(prevState => ({ step: (prevState.step += 1) }));\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div className={classes.landingContainer}>\r\n        <Typography>{this.state.welcomeMessage}</Typography>\r\n        {this.state.step >= 1 && (\r\n          <React.Fragment>\r\n            <Link to=\"/ping\">Step 2: Click here </Link>\r\n            <Route\r\n              path=\"/ping\"\r\n              render={props => {\r\n                return (\r\n                  <Ping\r\n                    {...props}\r\n                    incrementStep={this.incrementStep}\r\n                    step={this.state.step}\r\n                  />\r\n                );\r\n              }}\r\n            />\r\n          </React.Fragment>\r\n        )}\r\n        {this.state.step >= 3 && (\r\n          <Typography>All done! Now go make a pull request!</Typography>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(landinPageStyle)(LandingPage);\r\n","import React from \"react\";\r\nimport { MuiThemeProvider } from \"@material-ui/core\";\r\nimport { BrowserRouter, Route } from \"react-router-dom\";\r\n\r\nimport { theme } from \"./themes/theme\";\r\nimport LandingPage from \"./pages/Landing\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <MuiThemeProvider theme={theme}>\r\n      <BrowserRouter>\r\n        <Route path=\"/\" component={LandingPage} />\r\n      </BrowserRouter>\r\n    </MuiThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}